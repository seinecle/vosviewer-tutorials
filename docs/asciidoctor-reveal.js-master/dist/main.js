/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor-revealjs/converter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$register_for', '$[]', '$+', '$map', '$expand_path', '$new', '$merge', '$basebackend', '$htmlsyntax']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {};
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Revealjs, self = $Revealjs = $module($base, 'Revealjs');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Converter(){};
        var self = $Converter = $klass($base, $super, 'Converter', $Converter);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        Opal.cdecl($scope, 'ProvidedTemplatesDir', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
          return "node_modules/asciidoctor-reveal.js/templates"}; return nil; })());

        self.$register_for("revealjs");

        return (Opal.defn(self, '$initialize', TMP_2 = function Àêinitialize(backend, opts) {
          var $a, $b, TMP_1, $c, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, template_dirs = nil, user_template_dirs = nil, template_engine = nil, template_converter = nil, html5_converter = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          TMP_2.$$p = null;
          template_dirs = [$scope.get('ProvidedTemplatesDir')];
          if ((($a = (user_template_dirs = opts['$[]']("template_dirs"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            template_dirs = $rb_plus(template_dirs, ($a = ($b = user_template_dirs).$map, $a.$$p = (TMP_1 = function(d){var self = TMP_1.$$s || this;
if (d == null) d = nil;
            return Opal.get('File').$expand_path(d)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b))};
          if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
            template_engine = "jade"};
          template_converter = ((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('TemplateConverter')).$new(backend, template_dirs, (opts.$merge($hash2(["htmlsyntax", "template_engine"], {"htmlsyntax": "html", "template_engine": template_engine}))));
          html5_converter = ((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('Html5Converter')).$new(backend, opts);
          ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($c, backend, template_converter, html5_converter);
          self.$basebackend("html");
          return self.$htmlsyntax("html");
        }, TMP_2.$$arity = -2), nil) && 'initialize';
      })($scope.base, ((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('CompositeConverter')))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.1 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("asciidoctor-revealjs/converter");
    return require('asciidoctor-template.js');}
})(Opal);
